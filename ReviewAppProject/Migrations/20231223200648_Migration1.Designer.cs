// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReviewAppProject.Data;

#nullable disable

namespace ReviewAppProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231223200648_Migration1")]
    partial class Migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReviewAppProject.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.CourseProfessor", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "ProfessorId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("CoursesProfessors");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacultyId"));

                    b.Property<int>("CoursesCount")
                        .HasColumnType("int");

                    b.Property<string>("FacultyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("FacultyId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<double>("DifficultyPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("WouldTakeAgainPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.ReviewProfessor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Difficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Dislikes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Saves")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("WasAttendanceMandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("WouldTakeAgain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewProfessors");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.ReviewProfessorReviewTag", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ReviewsProfessorTags");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.ReviewProfessorTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReviewProfessorTags");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.ReviewUniversity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Clubs")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dislikes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Facilities")
                        .HasColumnType("int");

                    b.Property<int>("Food")
                        .HasColumnType("int");

                    b.Property<int>("Happiness")
                        .HasColumnType("int");

                    b.Property<int>("Internet")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<int>("Opportunities")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("Reputation")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Safety")
                        .HasColumnType("int");

                    b.Property<int>("Social")
                        .HasColumnType("int");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewUniversities");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Clubs")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Facilities")
                        .HasColumnType("float");

                    b.Property<double>("Food")
                        .HasColumnType("float");

                    b.Property<double>("Happiness")
                        .HasColumnType("float");

                    b.Property<double>("Internet")
                        .HasColumnType("float");

                    b.Property<double>("Location")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Opportunities")
                        .HasColumnType("float");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<double>("Reputation")
                        .HasColumnType("float");

                    b.Property<int>("ReviewsCount")
                        .HasColumnType("int");

                    b.Property<double>("Safety")
                        .HasColumnType("float");

                    b.Property<double>("Social")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.UserReviewProfessorDislike", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("UserReviewProfessorDislikes");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.UserReviewProfessorLike", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("UserReviewProfessorLikes");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.UserReviewUniversityDislike", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("UserReviewUniversityDislikes");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.UserReviewUniversityLike", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("UserReviewUniversityLikes");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.UserSavedReviewProfessor", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("UserSavedReviewProfessors");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.Course", b =>
                {
                    b.HasOne("ReviewAppProject.Data.Models.Faculty", "Faculty")
                        .WithMany("Courses")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.CourseProfessor", b =>
                {
                    b.HasOne("ReviewAppProject.Data.Models.Course", "Course")
                        .WithMany("Professors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewAppProject.Data.Models.Professor", "Professor")
                        .WithMany("Courses")
                        .HasForeignKey("ProfessorId")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.Faculty", b =>
                {
                    b.HasOne("ReviewAppProject.Data.Models.University", "University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.Professor", b =>
                {
                    b.HasOne("ReviewAppProject.Data.Models.Faculty", "Faculty")
                        .WithMany("Professors")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.ReviewProfessor", b =>
                {
                    b.HasOne("ReviewAppProject.Data.Models.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewAppProject.Data.Models.Professor", "Professor")
                        .WithMany("Reviews")
                        .HasForeignKey("ProfessorId")
                        .IsRequired();

                    b.HasOne("ReviewAppProject.Data.Models.User", "User")
                        .WithMany("ReviewsProfessors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Professor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.ReviewProfessorReviewTag", b =>
                {
                    b.HasOne("ReviewAppProject.Data.Models.ReviewProfessor", "ReviewProfessor")
                        .WithMany("Tags")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewAppProject.Data.Models.ReviewProfessorTag", "Tag")
                        .WithMany("Reviews")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewProfessor");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.ReviewUniversity", b =>
                {
                    b.HasOne("ReviewAppProject.Data.Models.University", "University")
                        .WithMany("Reviews")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewAppProject.Data.Models.User", "User")
                        .WithMany("ReviewsUniversities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.User", b =>
                {
                    b.HasOne("ReviewAppProject.Data.Models.Faculty", "Faculty")
                        .WithMany("Students")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.UserReviewProfessorDislike", b =>
                {
                    b.HasOne("ReviewAppProject.Data.Models.ReviewProfessor", "Review")
                        .WithMany("DislikedUsers")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewAppProject.Data.Models.User", "User")
                        .WithMany("DislikedReviewsProfessors")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.UserReviewProfessorLike", b =>
                {
                    b.HasOne("ReviewAppProject.Data.Models.ReviewProfessor", "Review")
                        .WithMany("LikedUsers")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewAppProject.Data.Models.User", "User")
                        .WithMany("LikedReviewsProfessors")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.UserReviewUniversityDislike", b =>
                {
                    b.HasOne("ReviewAppProject.Data.Models.ReviewUniversity", "Review")
                        .WithMany("DislikedUsers")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewAppProject.Data.Models.User", "User")
                        .WithMany("DislikedReviewsUniversities")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.UserReviewUniversityLike", b =>
                {
                    b.HasOne("ReviewAppProject.Data.Models.ReviewUniversity", "Review")
                        .WithMany("LikedUsers")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewAppProject.Data.Models.User", "User")
                        .WithMany("LikedReviewsUniversities")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.UserSavedReviewProfessor", b =>
                {
                    b.HasOne("ReviewAppProject.Data.Models.ReviewProfessor", "Review")
                        .WithMany("SavedUsers")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewAppProject.Data.Models.User", "User")
                        .WithMany("SavedReviewProfessors")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.Course", b =>
                {
                    b.Navigation("Professors");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.Faculty", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Professors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.Professor", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.ReviewProfessor", b =>
                {
                    b.Navigation("DislikedUsers");

                    b.Navigation("LikedUsers");

                    b.Navigation("SavedUsers");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.ReviewProfessorTag", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.ReviewUniversity", b =>
                {
                    b.Navigation("DislikedUsers");

                    b.Navigation("LikedUsers");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.University", b =>
                {
                    b.Navigation("Faculties");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ReviewAppProject.Data.Models.User", b =>
                {
                    b.Navigation("DislikedReviewsProfessors");

                    b.Navigation("DislikedReviewsUniversities");

                    b.Navigation("LikedReviewsProfessors");

                    b.Navigation("LikedReviewsUniversities");

                    b.Navigation("ReviewsProfessors");

                    b.Navigation("ReviewsUniversities");

                    b.Navigation("SavedReviewProfessors");
                });
#pragma warning restore 612, 618
        }
    }
}
